{"version":3,"sources":["lib/signaling-server.js","lib/constants.js","lib/peer.js","App.js","reportWebVitals.js","index.js"],"names":["SignalingServer","peerList","peer","peerId","Math","random","toString","substr","this","push","index","findIndex","item","splice","offer","forEach","receiveOffer","answer","receiveAnswer","candidate","addIceCandidate","dataChannelParams","ordered","maxRetransmits","RTCPeer","options","setupConnection","a","signalServer","registryRTCPeer","connection","addEventListener","e","log","sendIceCandidate","onDataChannel","close","unregistryRTCPeer","setupChannel","channel","createDataChannel","event","binaryType","onOpen","onClosed","onMessage","createOffer","JSON","stringify","promise","setLocalDescription","sendOffer","setRemoteDescription","createAnswer","sendAnswer","name","RTCPeerConnection","message","console","App","props","disconnect","_localPeer","_remotePeer","connect","rtcPeerOptions","setState","connected","_onLocalMessageReceived","_onRemoteMessageReceived","error","data","localMessages","state","remoteMessages","_sendMessage","value","send","_handleChangeValue","type","localOutMessage","remoteOutMessage","className","disabled","onClick","htmlFor","id","onChange","target","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reactDom","StrictMode","rootElement","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.c6387338.chunk.js","sourcesContent":["function genPeerId() {\n    return Math.random().toString(36).substr(2, 9);\n}\n\n/**\n * I'm a dummy WebRTC signaling server\n */\nexport class SignalingServer {\n    /**\n     *  Array<{\n            peerId: string;\n            peer: RTCPeer;\n        }>\n     */\n    peerList = [];\n\n    registryRTCPeer(peer) {\n        const peerId = genPeerId();\n        this.peerList.push({\n            peerId,\n            peer,\n        });\n        return peerId;\n    }\n\n    unregistryRTCPeer(peerId) {\n        const index = this.peerList.findIndex(item => item.peerId === peerId);\n        if (index >= 0) {\n            this.peerList.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    sendOffer(peerId, offer) {\n        this.peerList.forEach(item => {\n            if (item.peerId === peerId) {\n                return;\n            }\n            item.peer.receiveOffer(offer);\n        });\n    }\n\n    sendAnswer(peerId, answer) {\n        this.peerList.forEach(item => {\n            if (item.peerId === peerId) {\n                return;\n            }\n            item.peer.receiveAnswer(answer);\n        });\n    }\n\n    sendIceCandidate(peerId, candidate) {\n        this.peerList.forEach(item => {\n            if (item.peerId === peerId) {\n                return;\n            }\n            item.peer.addIceCandidate(candidate);\n        });\n    }\n}","export const dataChannelParams = {\n    // For UDP semantics, set maxRetransmits to 0 and ordered to false.\n    ordered: false,\n    maxRetransmits: 0,\n};\n\nexport const dataChannelName = 'messaging-channel';\n","import { dataChannelName, dataChannelParams } from './constants';\n\n/**\n *  options: {\n        name: string;\n        signalServer: SignalingServer,\n        onOpen: Function;\n        onClosed: Function;\n        onMessage: (ev: MessageEvent<any>) => any;\n    };\n    name: string;\n    peerId?: string;\n\n    connection: RTCPeerConnection;\n    channel?: RTCDataChannel;\n */\nexport class RTCPeer {\n    constructor(options) {\n        this.name = options.name;\n        this.options = options;\n        \n        // 1. setup connection\n        this.connection = new RTCPeerConnection();\n        this.setupConnection();\n    }\n\n    //////////\n    // Connection\n    //////////\n    setupConnection = async () => {\n        this.peerId = this.options.signalServer.registryRTCPeer(this);\n\n        this.connection.addEventListener('icecandidate', async (e) => {\n            this.log('ICE candidate:', e.candidate);\n            this.options.signalServer.sendIceCandidate(this.peerId, e.candidate);\n        });\n        this.connection.addEventListener('datachannel', this.onDataChannel);\n    }\n\n    addIceCandidate = (candidate) => {\n        return this.connection.addIceCandidate(candidate);\n    }\n\n    close = () => {\n        this.options.signalServer.unregistryRTCPeer(this.peerId);\n        this.connection.close();\n    }\n\n\n    //////////\n    // Channel\n    //////////\n    setupChannel = () => {\n        // 2. setup channel\n        this.channel = this.connection.createDataChannel(dataChannelName, dataChannelParams);\n        this.onDataChannel({\n            channel: this.channel\n        });\n    }\n\n    onDataChannel = (event) => {\n        this.channel = event.channel;\n        this.channel.binaryType = 'arraybuffer';\n        this.channel.addEventListener('open', () => {\n            this.log('channel open!');\n            this.options.onOpen();\n        });\n        this.channel.addEventListener('close', () => {\n            this.log('channel closed!');\n            this.options.onClosed();\n        });\n        this.channel.addEventListener(\n            'message',\n            this.options.onMessage,\n        );\n    }\n\n    \n    //////////\n    // Session\n    //////////\n    createOffer = async () => {\n        // 3. setup local offer\n        const offer = await this.connection.createOffer();\n        this.log('Got offer', JSON.stringify(offer));\n        const promise = this.connection.setLocalDescription(offer);\n        this.options.signalServer.sendOffer(this.peerId, offer);\n        \n        return promise;\n    }\n\n    receiveOffer = async (offer) => {\n        return this.connection.setRemoteDescription(offer);\n    }\n\n    createAnswer = async () => {\n        // 4. setup remote answer\n        const answer = await this.connection.createAnswer();\n        this.log('Got answer', JSON.stringify(answer));\n        const promise = this.connection.setLocalDescription(answer);\n        this.options.signalServer.sendAnswer(this.peerId, answer);\n\n        return promise;\n    }\n\n    receiveAnswer = async (answer) => {\n        return this.connection.setRemoteDescription(answer);\n    }\n\n    log(...message) {\n        console.log(`[${this.name}]`, ...message);\n    }\n}","import { Component } from \"react\";\nimport { SignalingServer } from './lib/signaling-server'\nimport \"./App.css\";\nimport { RTCPeer } from \"./lib/peer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false,\n      localMessages: \"\",\n      remoteMessages: \"\",\n      localOutMessage: \"\",\n      remoteOutMessage: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.signalServer = new SignalingServer();\n  }\n\n  async componentWillUnmount() {\n    if (this.state.connected) {\n      this.disconnect();\n    }\n  }\n\n  disconnect = () => {\n    this._localPeer.close();\n    this._remotePeer.close();\n  }\n\n  connect = async () => {\n    console.log(\"connect!\");\n    try {\n      // 1. setup connection\n      const rtcPeerOptions = {\n        signalServer: this.signalServer,\n        onOpen: () => {\n          this.setState({ connected: true });\n        },\n        onClosed: () => {\n          this.setState({ connected: false });\n        },\n      };\n      this._localPeer = new RTCPeer({\n        ...rtcPeerOptions,\n        name: 'local peer',\n        onMessage: this._onLocalMessageReceived\n      });\n      this._remotePeer = new RTCPeer({\n        ...rtcPeerOptions,\n        name: 'remote peer',\n        onMessage: this._onRemoteMessageReceived\n      });\n\n      // 2. setup channel\n      this._localPeer.setupChannel();\n\n      // 3. setup session\n      await this._localPeer.createOffer();\n      await this._remotePeer.createAnswer();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  _onLocalMessageReceived = (event) => {\n    console.log(`Remote message received by local: ${event.data}`);\n    this.setState({\n      localMessages: this.state.localMessages + \"> \" + event.data + \"\\n\",\n    });\n  };\n\n  _onRemoteMessageReceived = (event) => {\n    console.log(`Local message received by remote: ${event.data}`);\n    this.setState({\n      remoteMessages: this.state.remoteMessages + \"> \" + event.data + \"\\n\",\n    });\n  };\n\n  _sendMessage = (value, channel) => {\n    if (value === \"\") {\n      console.log(\"Not sending empty message!\");\n      return;\n    }\n    console.log(\"Sending remote message: \", value);\n    channel.send(value);\n  };\n\n  _handleChangeValue = (value, type) => {\n    this.setState({\n      [type]: value,\n    });\n  };\n\n  render() {\n    return (\n      <section>\n        <div className='controlPanel'>\n          <button disabled={this.state.connected} onClick={this.connect}>\n            Connect\n          </button>\n          <button disabled={!this.state.connected} onClick={this.disconnect}>\n            Disconnect\n          </button>\n        </div>\n\n        <div className='row'>\n          <div className='column'>\n            <h1>Local</h1>\n            <div className='messageBox'>\n              <label htmlFor='localOutgoing'>Local outgoing message:</label>\n              <textarea\n                className='message'\n                id='localOutgoing'\n                value={this.state.localOutMessage}\n                onChange={(e) =>\n                  this._handleChangeValue(e.target.value, \"localOutMessage\")\n                }\n              ></textarea>\n              <button\n                disabled={!this.state.connected}\n                onClick={(e) =>\n                  this._sendMessage(\n                    this.state.localOutMessage,\n                    this._localPeer.channel\n                  )\n                }\n                id='sendLocal'\n              >\n                Send Message from Local\n              </button>\n            </div>\n            <div className='messageBox'>\n              <label htmlFor='localIncoming'>Local incoming messages:</label>\n              <textarea\n                className='message message-incoming'\n                id='localIncoming'\n                disabled\n                value={this.state.localMessages}\n              ></textarea>\n            </div>\n          </div>\n\n          <div className='column'>\n            <h1>Remote</h1>\n            <div className='messageBox'>\n              <label htmlFor='remoteOutgoing'>Remote outgoing message:</label>\n              <textarea\n                className='message'\n                id='remoteOutgoing'\n                value={this.state.remoteOutMessage}\n                onChange={(e) =>\n                  this._handleChangeValue(e.target.value, \"remoteOutMessage\")\n                }\n              ></textarea>\n              <button\n                disabled={!this.state.connected}\n                onClick={(e) =>\n                  this._sendMessage(\n                    this.state.remoteOutMessage,\n                    this._remotePeer.channel\n                  )\n                }\n                id='sendRemote'\n              >\n                Send Message from Remote\n              </button>\n            </div>\n            <div className='messageBox'>\n              <label htmlFor='remoteIncoming'>Remote incoming messages:</label>\n              <textarea\n                className='message message-incoming'\n                id='remoteIncoming'\n                disabled\n                value={this.state.remoteMessages}\n              ></textarea>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { render, hydrate } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst reactDom = (\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\nconst rootElement = document.getElementById(\"root\");\n\nif (rootElement.hasChildNodes()) {\n  hydrate(reactDom, rootElement);\n} else {\n  render(reactDom, rootElement);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}